// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: room.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RoomEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: RoomEvent.TypeEnum = .joined

  var from: Int64 = 0

  var data: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case joined // = 0
    case left // = 1
    case addedSpeaker // = 2
    case removedSpeaker // = 3
    case changedOwner // = 4
    case mutedSpeaker // = 5
    case unmutedSpeaker // = 6
    case reacted // = 7
    case offer // = 8
    case candidate // = 9
    case UNRECOGNIZED(Int)

    init() {
      self = .joined
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .joined
      case 1: self = .left
      case 2: self = .addedSpeaker
      case 3: self = .removedSpeaker
      case 4: self = .changedOwner
      case 5: self = .mutedSpeaker
      case 6: self = .unmutedSpeaker
      case 7: self = .reacted
      case 8: self = .offer
      case 9: self = .candidate
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .joined: return 0
      case .left: return 1
      case .addedSpeaker: return 2
      case .removedSpeaker: return 3
      case .changedOwner: return 4
      case .mutedSpeaker: return 5
      case .unmutedSpeaker: return 6
      case .reacted: return 7
      case .offer: return 8
      case .candidate: return 9
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension RoomEvent.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [RoomEvent.TypeEnum] = [
    .joined,
    .left,
    .addedSpeaker,
    .removedSpeaker,
    .changedOwner,
    .mutedSpeaker,
    .unmutedSpeaker,
    .reacted,
    .offer,
    .candidate,
  ]
}

#endif  // swift(>=4.2)

struct RoomCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: RoomCommand.TypeEnum = .addSpeaker

  var data: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case addSpeaker // = 0
    case removeSpeaker // = 1
    case muteSpeaker // = 2
    case unmuteSpeaker // = 3
    case reaction // = 4
    case answer // = 5
    case candidate // = 6
    case UNRECOGNIZED(Int)

    init() {
      self = .addSpeaker
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .addSpeaker
      case 1: self = .removeSpeaker
      case 2: self = .muteSpeaker
      case 3: self = .unmuteSpeaker
      case 4: self = .reaction
      case 5: self = .answer
      case 6: self = .candidate
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .addSpeaker: return 0
      case .removeSpeaker: return 1
      case .muteSpeaker: return 2
      case .unmuteSpeaker: return 3
      case .reaction: return 4
      case .answer: return 5
      case .candidate: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension RoomCommand.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [RoomCommand.TypeEnum] = [
    .addSpeaker,
    .removeSpeaker,
    .muteSpeaker,
    .unmuteSpeaker,
    .reaction,
    .answer,
    .candidate,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension RoomEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RoomEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "from"),
    3: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularInt64Field(value: &self.from)
      case 3: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .joined {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.from != 0 {
      try visitor.visitSingularInt64Field(value: self.from, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RoomEvent, rhs: RoomEvent) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.from != rhs.from {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RoomEvent.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JOINED"),
    1: .same(proto: "LEFT"),
    2: .same(proto: "ADDED_SPEAKER"),
    3: .same(proto: "REMOVED_SPEAKER"),
    4: .same(proto: "CHANGED_OWNER"),
    5: .same(proto: "MUTED_SPEAKER"),
    6: .same(proto: "UNMUTED_SPEAKER"),
    7: .same(proto: "REACTED"),
    8: .same(proto: "OFFER"),
    9: .same(proto: "CANDIDATE"),
  ]
}

extension RoomCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RoomCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .addSpeaker {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RoomCommand, rhs: RoomCommand) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RoomCommand.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ADD_SPEAKER"),
    1: .same(proto: "REMOVE_SPEAKER"),
    2: .same(proto: "MUTE_SPEAKER"),
    3: .same(proto: "UNMUTE_SPEAKER"),
    4: .same(proto: "REACTION"),
    5: .same(proto: "ANSWER"),
    6: .same(proto: "CANDIDATE"),
  ]
}
