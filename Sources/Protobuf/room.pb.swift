// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: soapbox/v1/room.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Soapbox_V1_Visibility: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case `public` // = 0
  case `private` // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .public
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .public
    case 1: self = .private
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .public: return 0
    case .private: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Soapbox_V1_Visibility: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Soapbox_V1_Visibility] = [
    .public,
    .private,
  ]
}

#endif  // swift(>=4.2)

struct Soapbox_V1_Command {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var payload: Soapbox_V1_Command.OneOf_Payload? = nil

  var muteUpdate: Soapbox_V1_Command.MuteUpdate {
    get {
      if case .muteUpdate(let v)? = payload {return v}
      return Soapbox_V1_Command.MuteUpdate()
    }
    set {payload = .muteUpdate(newValue)}
  }

  var reaction: Soapbox_V1_Command.Reaction {
    get {
      if case .reaction(let v)? = payload {return v}
      return Soapbox_V1_Command.Reaction()
    }
    set {payload = .reaction(newValue)}
  }

  var linkShare: Soapbox_V1_Command.LinkShare {
    get {
      if case .linkShare(let v)? = payload {return v}
      return Soapbox_V1_Command.LinkShare()
    }
    set {payload = .linkShare(newValue)}
  }

  var inviteAdmin: Soapbox_V1_Command.InviteAdmin {
    get {
      if case .inviteAdmin(let v)? = payload {return v}
      return Soapbox_V1_Command.InviteAdmin()
    }
    set {payload = .inviteAdmin(newValue)}
  }

  var acceptAdmin: Soapbox_V1_Command.AcceptAdmin {
    get {
      if case .acceptAdmin(let v)? = payload {return v}
      return Soapbox_V1_Command.AcceptAdmin()
    }
    set {payload = .acceptAdmin(newValue)}
  }

  var removeAdmin: Soapbox_V1_Command.RemoveAdmin {
    get {
      if case .removeAdmin(let v)? = payload {return v}
      return Soapbox_V1_Command.RemoveAdmin()
    }
    set {payload = .removeAdmin(newValue)}
  }

  var renameRoom: Soapbox_V1_Command.RenameRoom {
    get {
      if case .renameRoom(let v)? = payload {return v}
      return Soapbox_V1_Command.RenameRoom()
    }
    set {payload = .renameRoom(newValue)}
  }

  var inviteUser: Soapbox_V1_Command.InviteUser {
    get {
      if case .inviteUser(let v)? = payload {return v}
      return Soapbox_V1_Command.InviteUser()
    }
    set {payload = .inviteUser(newValue)}
  }

  var kickUser: Soapbox_V1_Command.KickUser {
    get {
      if case .kickUser(let v)? = payload {return v}
      return Soapbox_V1_Command.KickUser()
    }
    set {payload = .kickUser(newValue)}
  }

  var muteUser: Soapbox_V1_Command.MuteUser {
    get {
      if case .muteUser(let v)? = payload {return v}
      return Soapbox_V1_Command.MuteUser()
    }
    set {payload = .muteUser(newValue)}
  }

  var recordScreen: Soapbox_V1_Command.RecordScreen {
    get {
      if case .recordScreen(let v)? = payload {return v}
      return Soapbox_V1_Command.RecordScreen()
    }
    set {payload = .recordScreen(newValue)}
  }

  var visibilityUpdate: Soapbox_V1_Command.VisibilityUpdate {
    get {
      if case .visibilityUpdate(let v)? = payload {return v}
      return Soapbox_V1_Command.VisibilityUpdate()
    }
    set {payload = .visibilityUpdate(newValue)}
  }

  var pinLink: Soapbox_V1_Command.PinLink {
    get {
      if case .pinLink(let v)? = payload {return v}
      return Soapbox_V1_Command.PinLink()
    }
    set {payload = .pinLink(newValue)}
  }

  var unpinLink: Soapbox_V1_Command.UnpinLink {
    get {
      if case .unpinLink(let v)? = payload {return v}
      return Soapbox_V1_Command.UnpinLink()
    }
    set {payload = .unpinLink(newValue)}
  }

  var openMini: Soapbox_V1_Command.OpenMini {
    get {
      if case .openMini(let v)? = payload {return v}
      return Soapbox_V1_Command.OpenMini()
    }
    set {payload = .openMini(newValue)}
  }

  var closeMini: Soapbox_V1_Command.CloseMini {
    get {
      if case .closeMini(let v)? = payload {return v}
      return Soapbox_V1_Command.CloseMini()
    }
    set {payload = .closeMini(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable {
    case muteUpdate(Soapbox_V1_Command.MuteUpdate)
    case reaction(Soapbox_V1_Command.Reaction)
    case linkShare(Soapbox_V1_Command.LinkShare)
    case inviteAdmin(Soapbox_V1_Command.InviteAdmin)
    case acceptAdmin(Soapbox_V1_Command.AcceptAdmin)
    case removeAdmin(Soapbox_V1_Command.RemoveAdmin)
    case renameRoom(Soapbox_V1_Command.RenameRoom)
    case inviteUser(Soapbox_V1_Command.InviteUser)
    case kickUser(Soapbox_V1_Command.KickUser)
    case muteUser(Soapbox_V1_Command.MuteUser)
    case recordScreen(Soapbox_V1_Command.RecordScreen)
    case visibilityUpdate(Soapbox_V1_Command.VisibilityUpdate)
    case pinLink(Soapbox_V1_Command.PinLink)
    case unpinLink(Soapbox_V1_Command.UnpinLink)
    case openMini(Soapbox_V1_Command.OpenMini)
    case closeMini(Soapbox_V1_Command.CloseMini)

  #if !swift(>=4.1)
    static func ==(lhs: Soapbox_V1_Command.OneOf_Payload, rhs: Soapbox_V1_Command.OneOf_Payload) -> Bool {
      switch (lhs, rhs) {
      case (.muteUpdate(let l), .muteUpdate(let r)): return l == r
      case (.reaction(let l), .reaction(let r)): return l == r
      case (.linkShare(let l), .linkShare(let r)): return l == r
      case (.inviteAdmin(let l), .inviteAdmin(let r)): return l == r
      case (.acceptAdmin(let l), .acceptAdmin(let r)): return l == r
      case (.removeAdmin(let l), .removeAdmin(let r)): return l == r
      case (.renameRoom(let l), .renameRoom(let r)): return l == r
      case (.inviteUser(let l), .inviteUser(let r)): return l == r
      case (.kickUser(let l), .kickUser(let r)): return l == r
      case (.muteUser(let l), .muteUser(let r)): return l == r
      case (.recordScreen(let l), .recordScreen(let r)): return l == r
      case (.visibilityUpdate(let l), .visibilityUpdate(let r)): return l == r
      case (.pinLink(let l), .pinLink(let r)): return l == r
      case (.unpinLink(let l), .unpinLink(let r)): return l == r
      case (.openMini(let l), .openMini(let r)): return l == r
      case (.closeMini(let l), .closeMini(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  struct MuteUpdate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var muted: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Reaction {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var emoji: Data = SwiftProtobuf.Internal.emptyData

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct LinkShare {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var link: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct InviteAdmin {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct AcceptAdmin {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct RemoveAdmin {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct RenameRoom {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct InviteUser {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct KickUser {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct MuteUser {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct RecordScreen {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct VisibilityUpdate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visibility: Soapbox_V1_Visibility = .public

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PinLink {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var link: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct UnpinLink {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct OpenMini {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mini: String = String()

    var id: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct CloseMini {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct Soapbox_V1_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var from: Int64 {
    get {return _storage._from}
    set {_uniqueStorage()._from = newValue}
  }

  var payload: OneOf_Payload? {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var joined: Soapbox_V1_Event.Joined {
    get {
      if case .joined(let v)? = _storage._payload {return v}
      return Soapbox_V1_Event.Joined()
    }
    set {_uniqueStorage()._payload = .joined(newValue)}
  }

  var left: Soapbox_V1_Event.Left {
    get {
      if case .left(let v)? = _storage._payload {return v}
      return Soapbox_V1_Event.Left()
    }
    set {_uniqueStorage()._payload = .left(newValue)}
  }

  var muteUpdated: Soapbox_V1_Event.MuteUpdated {
    get {
      if case .muteUpdated(let v)? = _storage._payload {return v}
      return Soapbox_V1_Event.MuteUpdated()
    }
    set {_uniqueStorage()._payload = .muteUpdated(newValue)}
  }

  var reacted: Soapbox_V1_Event.Reacted {
    get {
      if case .reacted(let v)? = _storage._payload {return v}
      return Soapbox_V1_Event.Reacted()
    }
    set {_uniqueStorage()._payload = .reacted(newValue)}
  }

  var linkShared: Soapbox_V1_Event.LinkShared {
    get {
      if case .linkShared(let v)? = _storage._payload {return v}
      return Soapbox_V1_Event.LinkShared()
    }
    set {_uniqueStorage()._payload = .linkShared(newValue)}
  }

  var invitedAdmin: Soapbox_V1_Event.InvitedAdmin {
    get {
      if case .invitedAdmin(let v)? = _storage._payload {return v}
      return Soapbox_V1_Event.InvitedAdmin()
    }
    set {_uniqueStorage()._payload = .invitedAdmin(newValue)}
  }

  var addedAdmin: Soapbox_V1_Event.AddedAdmin {
    get {
      if case .addedAdmin(let v)? = _storage._payload {return v}
      return Soapbox_V1_Event.AddedAdmin()
    }
    set {_uniqueStorage()._payload = .addedAdmin(newValue)}
  }

  var removedAdmin: Soapbox_V1_Event.RemovedAdmin {
    get {
      if case .removedAdmin(let v)? = _storage._payload {return v}
      return Soapbox_V1_Event.RemovedAdmin()
    }
    set {_uniqueStorage()._payload = .removedAdmin(newValue)}
  }

  var renamedRoom: Soapbox_V1_Event.RenamedRoom {
    get {
      if case .renamedRoom(let v)? = _storage._payload {return v}
      return Soapbox_V1_Event.RenamedRoom()
    }
    set {_uniqueStorage()._payload = .renamedRoom(newValue)}
  }

  var recordedScreen: Soapbox_V1_Event.RecordedScreen {
    get {
      if case .recordedScreen(let v)? = _storage._payload {return v}
      return Soapbox_V1_Event.RecordedScreen()
    }
    set {_uniqueStorage()._payload = .recordedScreen(newValue)}
  }

  var mutedByAdmin: Soapbox_V1_Event.MutedByAdmin {
    get {
      if case .mutedByAdmin(let v)? = _storage._payload {return v}
      return Soapbox_V1_Event.MutedByAdmin()
    }
    set {_uniqueStorage()._payload = .mutedByAdmin(newValue)}
  }

  var visibilityUpdated: Soapbox_V1_Event.VisibilityUpdated {
    get {
      if case .visibilityUpdated(let v)? = _storage._payload {return v}
      return Soapbox_V1_Event.VisibilityUpdated()
    }
    set {_uniqueStorage()._payload = .visibilityUpdated(newValue)}
  }

  var pinnedLink: Soapbox_V1_Event.PinnedLink {
    get {
      if case .pinnedLink(let v)? = _storage._payload {return v}
      return Soapbox_V1_Event.PinnedLink()
    }
    set {_uniqueStorage()._payload = .pinnedLink(newValue)}
  }

  var unpinnedLink: Soapbox_V1_Event.UnpinnedLink {
    get {
      if case .unpinnedLink(let v)? = _storage._payload {return v}
      return Soapbox_V1_Event.UnpinnedLink()
    }
    set {_uniqueStorage()._payload = .unpinnedLink(newValue)}
  }

  var openedMini: Soapbox_V1_Event.OpenedMini {
    get {
      if case .openedMini(let v)? = _storage._payload {return v}
      return Soapbox_V1_Event.OpenedMini()
    }
    set {_uniqueStorage()._payload = .openedMini(newValue)}
  }

  var closedMini: Soapbox_V1_Event.ClosedMini {
    get {
      if case .closedMini(let v)? = _storage._payload {return v}
      return Soapbox_V1_Event.ClosedMini()
    }
    set {_uniqueStorage()._payload = .closedMini(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable {
    case joined(Soapbox_V1_Event.Joined)
    case left(Soapbox_V1_Event.Left)
    case muteUpdated(Soapbox_V1_Event.MuteUpdated)
    case reacted(Soapbox_V1_Event.Reacted)
    case linkShared(Soapbox_V1_Event.LinkShared)
    case invitedAdmin(Soapbox_V1_Event.InvitedAdmin)
    case addedAdmin(Soapbox_V1_Event.AddedAdmin)
    case removedAdmin(Soapbox_V1_Event.RemovedAdmin)
    case renamedRoom(Soapbox_V1_Event.RenamedRoom)
    case recordedScreen(Soapbox_V1_Event.RecordedScreen)
    case mutedByAdmin(Soapbox_V1_Event.MutedByAdmin)
    case visibilityUpdated(Soapbox_V1_Event.VisibilityUpdated)
    case pinnedLink(Soapbox_V1_Event.PinnedLink)
    case unpinnedLink(Soapbox_V1_Event.UnpinnedLink)
    case openedMini(Soapbox_V1_Event.OpenedMini)
    case closedMini(Soapbox_V1_Event.ClosedMini)

  #if !swift(>=4.1)
    static func ==(lhs: Soapbox_V1_Event.OneOf_Payload, rhs: Soapbox_V1_Event.OneOf_Payload) -> Bool {
      switch (lhs, rhs) {
      case (.joined(let l), .joined(let r)): return l == r
      case (.left(let l), .left(let r)): return l == r
      case (.muteUpdated(let l), .muteUpdated(let r)): return l == r
      case (.reacted(let l), .reacted(let r)): return l == r
      case (.linkShared(let l), .linkShared(let r)): return l == r
      case (.invitedAdmin(let l), .invitedAdmin(let r)): return l == r
      case (.addedAdmin(let l), .addedAdmin(let r)): return l == r
      case (.removedAdmin(let l), .removedAdmin(let r)): return l == r
      case (.renamedRoom(let l), .renamedRoom(let r)): return l == r
      case (.recordedScreen(let l), .recordedScreen(let r)): return l == r
      case (.mutedByAdmin(let l), .mutedByAdmin(let r)): return l == r
      case (.visibilityUpdated(let l), .visibilityUpdated(let r)): return l == r
      case (.pinnedLink(let l), .pinnedLink(let r)): return l == r
      case (.unpinnedLink(let l), .unpinnedLink(let r)): return l == r
      case (.openedMini(let l), .openedMini(let r)): return l == r
      case (.closedMini(let l), .closedMini(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  struct Joined {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var user: Soapbox_V1_RoomState.RoomMember {
      get {return _user ?? Soapbox_V1_RoomState.RoomMember()}
      set {_user = newValue}
    }
    /// Returns true if `user` has been explicitly set.
    var hasUser: Bool {return self._user != nil}
    /// Clears the value of `user`. Subsequent reads from it will return its default value.
    mutating func clearUser() {self._user = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _user: Soapbox_V1_RoomState.RoomMember? = nil
  }

  struct Left {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct MuteUpdated {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var isMuted: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Reacted {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var emoji: Data = SwiftProtobuf.Internal.emptyData

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct LinkShared {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var link: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct InvitedAdmin {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct AddedAdmin {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct RemovedAdmin {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct RenamedRoom {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct RecordedScreen {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct MutedByAdmin {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct VisibilityUpdated {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visibility: Soapbox_V1_Visibility = .public

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PinnedLink {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var link: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct UnpinnedLink {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct OpenedMini {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var slug: String = String()

    var mini: Soapbox_V1_RoomState.Mini {
      get {return _mini ?? Soapbox_V1_RoomState.Mini()}
      set {_mini = newValue}
    }
    /// Returns true if `mini` has been explicitly set.
    var hasMini: Bool {return self._mini != nil}
    /// Clears the value of `mini`. Subsequent reads from it will return its default value.
    mutating func clearMini() {self._mini = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _mini: Soapbox_V1_RoomState.Mini? = nil
  }

  struct ClosedMini {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Soapbox_V1_RoomState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var members: [Soapbox_V1_RoomState.RoomMember] = []

  /// @TODO THINK ABOUT ENUM
  var role: String = String()

  var visibility: Soapbox_V1_Visibility = .public

  var group: Soapbox_V1_RoomState.Group {
    get {return _group ?? Soapbox_V1_RoomState.Group()}
    set {_group = newValue}
  }
  /// Returns true if `group` has been explicitly set.
  var hasGroup: Bool {return self._group != nil}
  /// Clears the value of `group`. Subsequent reads from it will return its default value.
  mutating func clearGroup() {self._group = nil}

  var link: String = String()

  var miniOld: String = String()

  var mini: Soapbox_V1_RoomState.Mini {
    get {return _mini ?? Soapbox_V1_RoomState.Mini()}
    set {_mini = newValue}
  }
  /// Returns true if `mini` has been explicitly set.
  var hasMini: Bool {return self._mini != nil}
  /// Clears the value of `mini`. Subsequent reads from it will return its default value.
  mutating func clearMini() {self._mini = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct RoomMember {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 = 0

    var displayName: String = String()

    var image: String = String()

    var role: Soapbox_V1_RoomState.RoomMember.Role = .regular

    var muted: Bool = false

    var ssrc: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum Role: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case regular // = 0
      case admin // = 1
      case UNRECOGNIZED(Int)

      init() {
        self = .regular
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .regular
        case 1: self = .admin
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .regular: return 0
        case .admin: return 1
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    init() {}
  }

  struct Group {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 = 0

    var name: String = String()

    var image: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Mini {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 = 0

    var slug: String = String()

    var size: Soapbox_V1_RoomState.Mini.Size = .small

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum Size: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case small // = 0
      case regular // = 1
      case large // = 2
      case UNRECOGNIZED(Int)

      init() {
        self = .small
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .small
        case 1: self = .regular
        case 2: self = .large
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .small: return 0
        case .regular: return 1
        case .large: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    init() {}
  }

  init() {}

  fileprivate var _group: Soapbox_V1_RoomState.Group? = nil
  fileprivate var _mini: Soapbox_V1_RoomState.Mini? = nil
}

#if swift(>=4.2)

extension Soapbox_V1_RoomState.RoomMember.Role: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Soapbox_V1_RoomState.RoomMember.Role] = [
    .regular,
    .admin,
  ]
}

extension Soapbox_V1_RoomState.Mini.Size: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Soapbox_V1_RoomState.Mini.Size] = [
    .small,
    .regular,
    .large,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "soapbox.v1"

extension Soapbox_V1_Visibility: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VISIBILITY_PUBLIC"),
    1: .same(proto: "VISIBILITY_PRIVATE"),
  ]
}

extension Soapbox_V1_Command: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Command"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mute_update"),
    2: .same(proto: "reaction"),
    3: .standard(proto: "link_share"),
    4: .standard(proto: "invite_admin"),
    5: .standard(proto: "accept_admin"),
    6: .standard(proto: "remove_admin"),
    7: .standard(proto: "rename_room"),
    8: .standard(proto: "invite_user"),
    9: .standard(proto: "kick_user"),
    10: .standard(proto: "mute_user"),
    11: .standard(proto: "record_screen"),
    12: .standard(proto: "visibility_update"),
    13: .standard(proto: "pin_link"),
    14: .standard(proto: "unpin_link"),
    15: .standard(proto: "open_mini"),
    16: .standard(proto: "close_mini"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Soapbox_V1_Command.MuteUpdate?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .muteUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .muteUpdate(v)}
      case 2:
        var v: Soapbox_V1_Command.Reaction?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .reaction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .reaction(v)}
      case 3:
        var v: Soapbox_V1_Command.LinkShare?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .linkShare(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .linkShare(v)}
      case 4:
        var v: Soapbox_V1_Command.InviteAdmin?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .inviteAdmin(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .inviteAdmin(v)}
      case 5:
        var v: Soapbox_V1_Command.AcceptAdmin?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .acceptAdmin(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .acceptAdmin(v)}
      case 6:
        var v: Soapbox_V1_Command.RemoveAdmin?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .removeAdmin(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .removeAdmin(v)}
      case 7:
        var v: Soapbox_V1_Command.RenameRoom?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .renameRoom(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .renameRoom(v)}
      case 8:
        var v: Soapbox_V1_Command.InviteUser?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .inviteUser(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .inviteUser(v)}
      case 9:
        var v: Soapbox_V1_Command.KickUser?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .kickUser(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .kickUser(v)}
      case 10:
        var v: Soapbox_V1_Command.MuteUser?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .muteUser(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .muteUser(v)}
      case 11:
        var v: Soapbox_V1_Command.RecordScreen?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .recordScreen(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .recordScreen(v)}
      case 12:
        var v: Soapbox_V1_Command.VisibilityUpdate?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .visibilityUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .visibilityUpdate(v)}
      case 13:
        var v: Soapbox_V1_Command.PinLink?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .pinLink(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .pinLink(v)}
      case 14:
        var v: Soapbox_V1_Command.UnpinLink?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .unpinLink(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .unpinLink(v)}
      case 15:
        var v: Soapbox_V1_Command.OpenMini?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .openMini(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .openMini(v)}
      case 16:
        var v: Soapbox_V1_Command.CloseMini?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .closeMini(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .closeMini(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.payload {
    case .muteUpdate(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .reaction(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .linkShare(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .inviteAdmin(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .acceptAdmin(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .removeAdmin(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    case .renameRoom(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    case .inviteUser(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    case .kickUser(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    case .muteUser(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    case .recordScreen(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    case .visibilityUpdate(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    case .pinLink(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    case .unpinLink(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    case .openMini(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    case .closeMini(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command, rhs: Soapbox_V1_Command) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Command.MuteUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Command.protoMessageName + ".MuteUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "muted"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.muted)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.muted != false {
      try visitor.visitSingularBoolField(value: self.muted, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command.MuteUpdate, rhs: Soapbox_V1_Command.MuteUpdate) -> Bool {
    if lhs.muted != rhs.muted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Command.Reaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Command.protoMessageName + ".Reaction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "emoji"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.emoji)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.emoji.isEmpty {
      try visitor.visitSingularBytesField(value: self.emoji, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command.Reaction, rhs: Soapbox_V1_Command.Reaction) -> Bool {
    if lhs.emoji != rhs.emoji {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Command.LinkShare: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Command.protoMessageName + ".LinkShare"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "link"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.link)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.link.isEmpty {
      try visitor.visitSingularStringField(value: self.link, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command.LinkShare, rhs: Soapbox_V1_Command.LinkShare) -> Bool {
    if lhs.link != rhs.link {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Command.InviteAdmin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Command.protoMessageName + ".InviteAdmin"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command.InviteAdmin, rhs: Soapbox_V1_Command.InviteAdmin) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Command.AcceptAdmin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Command.protoMessageName + ".AcceptAdmin"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command.AcceptAdmin, rhs: Soapbox_V1_Command.AcceptAdmin) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Command.RemoveAdmin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Command.protoMessageName + ".RemoveAdmin"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command.RemoveAdmin, rhs: Soapbox_V1_Command.RemoveAdmin) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Command.RenameRoom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Command.protoMessageName + ".RenameRoom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command.RenameRoom, rhs: Soapbox_V1_Command.RenameRoom) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Command.InviteUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Command.protoMessageName + ".InviteUser"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command.InviteUser, rhs: Soapbox_V1_Command.InviteUser) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Command.KickUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Command.protoMessageName + ".KickUser"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command.KickUser, rhs: Soapbox_V1_Command.KickUser) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Command.MuteUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Command.protoMessageName + ".MuteUser"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command.MuteUser, rhs: Soapbox_V1_Command.MuteUser) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Command.RecordScreen: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Command.protoMessageName + ".RecordScreen"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command.RecordScreen, rhs: Soapbox_V1_Command.RecordScreen) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Command.VisibilityUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Command.protoMessageName + ".VisibilityUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visibility"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.visibility)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.visibility != .public {
      try visitor.visitSingularEnumField(value: self.visibility, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command.VisibilityUpdate, rhs: Soapbox_V1_Command.VisibilityUpdate) -> Bool {
    if lhs.visibility != rhs.visibility {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Command.PinLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Command.protoMessageName + ".PinLink"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "link"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.link)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.link.isEmpty {
      try visitor.visitSingularStringField(value: self.link, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command.PinLink, rhs: Soapbox_V1_Command.PinLink) -> Bool {
    if lhs.link != rhs.link {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Command.UnpinLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Command.protoMessageName + ".UnpinLink"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command.UnpinLink, rhs: Soapbox_V1_Command.UnpinLink) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Command.OpenMini: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Command.protoMessageName + ".OpenMini"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mini"),
    2: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.mini)
      case 2: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mini.isEmpty {
      try visitor.visitSingularStringField(value: self.mini, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command.OpenMini, rhs: Soapbox_V1_Command.OpenMini) -> Bool {
    if lhs.mini != rhs.mini {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Command.CloseMini: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Command.protoMessageName + ".CloseMini"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Command.CloseMini, rhs: Soapbox_V1_Command.CloseMini) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Event"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "joined"),
    3: .same(proto: "left"),
    4: .standard(proto: "mute_updated"),
    5: .same(proto: "reacted"),
    6: .standard(proto: "link_shared"),
    7: .standard(proto: "invited_admin"),
    8: .standard(proto: "added_admin"),
    9: .standard(proto: "removed_admin"),
    10: .standard(proto: "renamed_room"),
    11: .standard(proto: "recorded_screen"),
    12: .standard(proto: "muted_by_admin"),
    13: .standard(proto: "visibility_updated"),
    14: .standard(proto: "pinned_link"),
    15: .standard(proto: "unpinned_link"),
    16: .standard(proto: "opened_mini"),
    17: .standard(proto: "closed_mini"),
  ]

  fileprivate class _StorageClass {
    var _from: Int64 = 0
    var _payload: Soapbox_V1_Event.OneOf_Payload?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _from = source._from
      _payload = source._payload
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._from)
        case 2:
          var v: Soapbox_V1_Event.Joined?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .joined(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .joined(v)}
        case 3:
          var v: Soapbox_V1_Event.Left?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .left(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .left(v)}
        case 4:
          var v: Soapbox_V1_Event.MuteUpdated?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .muteUpdated(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .muteUpdated(v)}
        case 5:
          var v: Soapbox_V1_Event.Reacted?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .reacted(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .reacted(v)}
        case 6:
          var v: Soapbox_V1_Event.LinkShared?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .linkShared(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .linkShared(v)}
        case 7:
          var v: Soapbox_V1_Event.InvitedAdmin?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .invitedAdmin(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .invitedAdmin(v)}
        case 8:
          var v: Soapbox_V1_Event.AddedAdmin?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .addedAdmin(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .addedAdmin(v)}
        case 9:
          var v: Soapbox_V1_Event.RemovedAdmin?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .removedAdmin(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .removedAdmin(v)}
        case 10:
          var v: Soapbox_V1_Event.RenamedRoom?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .renamedRoom(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .renamedRoom(v)}
        case 11:
          var v: Soapbox_V1_Event.RecordedScreen?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .recordedScreen(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .recordedScreen(v)}
        case 12:
          var v: Soapbox_V1_Event.MutedByAdmin?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .mutedByAdmin(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .mutedByAdmin(v)}
        case 13:
          var v: Soapbox_V1_Event.VisibilityUpdated?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .visibilityUpdated(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .visibilityUpdated(v)}
        case 14:
          var v: Soapbox_V1_Event.PinnedLink?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .pinnedLink(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .pinnedLink(v)}
        case 15:
          var v: Soapbox_V1_Event.UnpinnedLink?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .unpinnedLink(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .unpinnedLink(v)}
        case 16:
          var v: Soapbox_V1_Event.OpenedMini?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .openedMini(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .openedMini(v)}
        case 17:
          var v: Soapbox_V1_Event.ClosedMini?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .closedMini(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .closedMini(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._from != 0 {
        try visitor.visitSingularInt64Field(value: _storage._from, fieldNumber: 1)
      }
      switch _storage._payload {
      case .joined(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .left(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .muteUpdated(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .reacted(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .linkShared(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .invitedAdmin(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .addedAdmin(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .removedAdmin(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .renamedRoom(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .recordedScreen(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .mutedByAdmin(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .visibilityUpdated(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .pinnedLink(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      case .unpinnedLink(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      case .openedMini(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      case .closedMini(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event, rhs: Soapbox_V1_Event) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._from != rhs_storage._from {return false}
        if _storage._payload != rhs_storage._payload {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event.Joined: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Event.protoMessageName + ".Joined"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._user)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event.Joined, rhs: Soapbox_V1_Event.Joined) -> Bool {
    if lhs._user != rhs._user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event.Left: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Event.protoMessageName + ".Left"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event.Left, rhs: Soapbox_V1_Event.Left) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event.MuteUpdated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Event.protoMessageName + ".MuteUpdated"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_muted"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.isMuted)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isMuted != false {
      try visitor.visitSingularBoolField(value: self.isMuted, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event.MuteUpdated, rhs: Soapbox_V1_Event.MuteUpdated) -> Bool {
    if lhs.isMuted != rhs.isMuted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event.Reacted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Event.protoMessageName + ".Reacted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "emoji"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.emoji)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.emoji.isEmpty {
      try visitor.visitSingularBytesField(value: self.emoji, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event.Reacted, rhs: Soapbox_V1_Event.Reacted) -> Bool {
    if lhs.emoji != rhs.emoji {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event.LinkShared: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Event.protoMessageName + ".LinkShared"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "link"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.link)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.link.isEmpty {
      try visitor.visitSingularStringField(value: self.link, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event.LinkShared, rhs: Soapbox_V1_Event.LinkShared) -> Bool {
    if lhs.link != rhs.link {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event.InvitedAdmin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Event.protoMessageName + ".InvitedAdmin"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event.InvitedAdmin, rhs: Soapbox_V1_Event.InvitedAdmin) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event.AddedAdmin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Event.protoMessageName + ".AddedAdmin"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event.AddedAdmin, rhs: Soapbox_V1_Event.AddedAdmin) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event.RemovedAdmin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Event.protoMessageName + ".RemovedAdmin"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event.RemovedAdmin, rhs: Soapbox_V1_Event.RemovedAdmin) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event.RenamedRoom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Event.protoMessageName + ".RenamedRoom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event.RenamedRoom, rhs: Soapbox_V1_Event.RenamedRoom) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event.RecordedScreen: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Event.protoMessageName + ".RecordedScreen"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event.RecordedScreen, rhs: Soapbox_V1_Event.RecordedScreen) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event.MutedByAdmin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Event.protoMessageName + ".MutedByAdmin"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event.MutedByAdmin, rhs: Soapbox_V1_Event.MutedByAdmin) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event.VisibilityUpdated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Event.protoMessageName + ".VisibilityUpdated"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visibility"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.visibility)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.visibility != .public {
      try visitor.visitSingularEnumField(value: self.visibility, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event.VisibilityUpdated, rhs: Soapbox_V1_Event.VisibilityUpdated) -> Bool {
    if lhs.visibility != rhs.visibility {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event.PinnedLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Event.protoMessageName + ".PinnedLink"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "link"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.link)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.link.isEmpty {
      try visitor.visitSingularStringField(value: self.link, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event.PinnedLink, rhs: Soapbox_V1_Event.PinnedLink) -> Bool {
    if lhs.link != rhs.link {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event.UnpinnedLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Event.protoMessageName + ".UnpinnedLink"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event.UnpinnedLink, rhs: Soapbox_V1_Event.UnpinnedLink) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event.OpenedMini: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Event.protoMessageName + ".OpenedMini"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "slug"),
    2: .same(proto: "mini"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.slug)
      case 2: try decoder.decodeSingularMessageField(value: &self._mini)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.slug.isEmpty {
      try visitor.visitSingularStringField(value: self.slug, fieldNumber: 1)
    }
    if let v = self._mini {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event.OpenedMini, rhs: Soapbox_V1_Event.OpenedMini) -> Bool {
    if lhs.slug != rhs.slug {return false}
    if lhs._mini != rhs._mini {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Event.ClosedMini: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_Event.protoMessageName + ".ClosedMini"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Event.ClosedMini, rhs: Soapbox_V1_Event.ClosedMini) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_RoomState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RoomState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "members"),
    4: .same(proto: "role"),
    5: .same(proto: "visibility"),
    6: .same(proto: "group"),
    7: .same(proto: "link"),
    8: .standard(proto: "mini_old"),
    9: .same(proto: "mini"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.members)
      case 4: try decoder.decodeSingularStringField(value: &self.role)
      case 5: try decoder.decodeSingularEnumField(value: &self.visibility)
      case 6: try decoder.decodeSingularMessageField(value: &self._group)
      case 7: try decoder.decodeSingularStringField(value: &self.link)
      case 8: try decoder.decodeSingularStringField(value: &self.miniOld)
      case 9: try decoder.decodeSingularMessageField(value: &self._mini)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.members.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.members, fieldNumber: 3)
    }
    if !self.role.isEmpty {
      try visitor.visitSingularStringField(value: self.role, fieldNumber: 4)
    }
    if self.visibility != .public {
      try visitor.visitSingularEnumField(value: self.visibility, fieldNumber: 5)
    }
    if let v = self._group {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.link.isEmpty {
      try visitor.visitSingularStringField(value: self.link, fieldNumber: 7)
    }
    if !self.miniOld.isEmpty {
      try visitor.visitSingularStringField(value: self.miniOld, fieldNumber: 8)
    }
    if let v = self._mini {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_RoomState, rhs: Soapbox_V1_RoomState) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.members != rhs.members {return false}
    if lhs.role != rhs.role {return false}
    if lhs.visibility != rhs.visibility {return false}
    if lhs._group != rhs._group {return false}
    if lhs.link != rhs.link {return false}
    if lhs.miniOld != rhs.miniOld {return false}
    if lhs._mini != rhs._mini {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_RoomState.RoomMember: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_RoomState.protoMessageName + ".RoomMember"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "image"),
    4: .same(proto: "role"),
    5: .same(proto: "muted"),
    6: .same(proto: "ssrc"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.displayName)
      case 3: try decoder.decodeSingularStringField(value: &self.image)
      case 4: try decoder.decodeSingularEnumField(value: &self.role)
      case 5: try decoder.decodeSingularBoolField(value: &self.muted)
      case 6: try decoder.decodeSingularUInt32Field(value: &self.ssrc)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 3)
    }
    if self.role != .regular {
      try visitor.visitSingularEnumField(value: self.role, fieldNumber: 4)
    }
    if self.muted != false {
      try visitor.visitSingularBoolField(value: self.muted, fieldNumber: 5)
    }
    if self.ssrc != 0 {
      try visitor.visitSingularUInt32Field(value: self.ssrc, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_RoomState.RoomMember, rhs: Soapbox_V1_RoomState.RoomMember) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.image != rhs.image {return false}
    if lhs.role != rhs.role {return false}
    if lhs.muted != rhs.muted {return false}
    if lhs.ssrc != rhs.ssrc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_RoomState.RoomMember.Role: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ROLE_REGULAR"),
    1: .same(proto: "ROLE_ADMIN"),
  ]
}

extension Soapbox_V1_RoomState.Group: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_RoomState.protoMessageName + ".Group"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "image"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.image)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_RoomState.Group, rhs: Soapbox_V1_RoomState.Group) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.image != rhs.image {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_RoomState.Mini: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Soapbox_V1_RoomState.protoMessageName + ".Mini"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "slug"),
    3: .same(proto: "size"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.slug)
      case 3: try decoder.decodeSingularEnumField(value: &self.size)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.slug.isEmpty {
      try visitor.visitSingularStringField(value: self.slug, fieldNumber: 2)
    }
    if self.size != .small {
      try visitor.visitSingularEnumField(value: self.size, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_RoomState.Mini, rhs: Soapbox_V1_RoomState.Mini) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.slug != rhs.slug {return false}
    if lhs.size != rhs.size {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_RoomState.Mini.Size: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SIZE_SMALL"),
    1: .same(proto: "SIZE_REGULAR"),
    2: .same(proto: "SIZE_LARGE"),
  ]
}
