// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: signal.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SignalRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var payload: SignalRequest.OneOf_Payload? = nil

  var join: JoinRequest {
    get {
      if case .join(let v)? = payload {return v}
      return JoinRequest()
    }
    set {payload = .join(newValue)}
  }

  var create: CreateRequest {
    get {
      if case .create(let v)? = payload {return v}
      return CreateRequest()
    }
    set {payload = .create(newValue)}
  }

  var description_p: SessionDescription {
    get {
      if case .description_p(let v)? = payload {return v}
      return SessionDescription()
    }
    set {payload = .description_p(newValue)}
  }

  var trickle: Trickle {
    get {
      if case .trickle(let v)? = payload {return v}
      return Trickle()
    }
    set {payload = .trickle(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable {
    case join(JoinRequest)
    case create(CreateRequest)
    case description_p(SessionDescription)
    case trickle(Trickle)

  #if !swift(>=4.1)
    static func ==(lhs: SignalRequest.OneOf_Payload, rhs: SignalRequest.OneOf_Payload) -> Bool {
      switch (lhs, rhs) {
      case (.join(let l), .join(let r)): return l == r
      case (.create(let l), .create(let r)): return l == r
      case (.description_p(let l), .description_p(let r)): return l == r
      case (.trickle(let l), .trickle(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct SignalReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var payload: SignalReply.OneOf_Payload? = nil

  var join: JoinReply {
    get {
      if case .join(let v)? = payload {return v}
      return JoinReply()
    }
    set {payload = .join(newValue)}
  }

  var create: CreateReply {
    get {
      if case .create(let v)? = payload {return v}
      return CreateReply()
    }
    set {payload = .create(newValue)}
  }

  var description_p: SessionDescription {
    get {
      if case .description_p(let v)? = payload {return v}
      return SessionDescription()
    }
    set {payload = .description_p(newValue)}
  }

  var trickle: Trickle {
    get {
      if case .trickle(let v)? = payload {return v}
      return Trickle()
    }
    set {payload = .trickle(newValue)}
  }

  var iceConnectionState: String {
    get {
      if case .iceConnectionState(let v)? = payload {return v}
      return String()
    }
    set {payload = .iceConnectionState(newValue)}
  }

  var error: String {
    get {
      if case .error(let v)? = payload {return v}
      return String()
    }
    set {payload = .error(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable {
    case join(JoinReply)
    case create(CreateReply)
    case description_p(SessionDescription)
    case trickle(Trickle)
    case iceConnectionState(String)
    case error(String)

  #if !swift(>=4.1)
    static func ==(lhs: SignalReply.OneOf_Payload, rhs: SignalReply.OneOf_Payload) -> Bool {
      switch (lhs, rhs) {
      case (.join(let l), .join(let r)): return l == r
      case (.create(let l), .create(let r)): return l == r
      case (.description_p(let l), .description_p(let r)): return l == r
      case (.trickle(let l), .trickle(let r)): return l == r
      case (.iceConnectionState(let l), .iceConnectionState(let r)): return l == r
      case (.error(let l), .error(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct JoinRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var room: String = String()

  var description_p: SessionDescription {
    get {return _description_p ?? SessionDescription()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _description_p: SessionDescription? = nil
}

struct JoinReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var description_p: SessionDescription {
    get {return _description_p ?? SessionDescription()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var room: RoomState {
    get {return _room ?? RoomState()}
    set {_room = newValue}
  }
  /// Returns true if `room` has been explicitly set.
  var hasRoom: Bool {return self._room != nil}
  /// Clears the value of `room`. Subsequent reads from it will return its default value.
  mutating func clearRoom() {self._room = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _description_p: SessionDescription? = nil
  fileprivate var _room: RoomState? = nil
}

struct CreateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var visibility: Visibility = .public

  var group: Int64 = 0

  var users: [Int64] = []

  var description_p: SessionDescription {
    get {return _description_p ?? SessionDescription()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _description_p: SessionDescription? = nil
}

struct CreateReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var description_p: SessionDescription {
    get {return _description_p ?? SessionDescription()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _description_p: SessionDescription? = nil
}

struct SessionDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// "answer" | "offer" | "pranswer" | "rollback"
  var type: String = String()

  var sdp: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ICECandidate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var candidate: String = String()

  var sdpMid: String = String()

  var sdpMlineIndex: Int64 = 0

  var usernameFragment: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Trickle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var target: Trickle.Target = .publisher

  var iceCandidate: ICECandidate {
    get {return _iceCandidate ?? ICECandidate()}
    set {_iceCandidate = newValue}
  }
  /// Returns true if `iceCandidate` has been explicitly set.
  var hasIceCandidate: Bool {return self._iceCandidate != nil}
  /// Clears the value of `iceCandidate`. Subsequent reads from it will return its default value.
  mutating func clearIceCandidate() {self._iceCandidate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Target: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case publisher // = 0
    case subscriber // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .publisher
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .publisher
      case 1: self = .subscriber
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .publisher: return 0
      case .subscriber: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _iceCandidate: ICECandidate? = nil
}

#if swift(>=4.2)

extension Trickle.Target: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Trickle.Target] = [
    .publisher,
    .subscriber,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension SignalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SignalRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "join"),
    3: .same(proto: "create"),
    4: .same(proto: "description"),
    5: .same(proto: "trickle"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2:
        var v: JoinRequest?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .join(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .join(v)}
      case 3:
        var v: CreateRequest?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .create(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .create(v)}
      case 4:
        var v: SessionDescription?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .description_p(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .description_p(v)}
      case 5:
        var v: Trickle?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .trickle(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .trickle(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    switch self.payload {
    case .join(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .create(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .description_p(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .trickle(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignalRequest, rhs: SignalRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignalReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SignalReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "join"),
    3: .same(proto: "create"),
    4: .same(proto: "description"),
    5: .same(proto: "trickle"),
    6: .same(proto: "iceConnectionState"),
    7: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2:
        var v: JoinReply?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .join(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .join(v)}
      case 3:
        var v: CreateReply?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .create(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .create(v)}
      case 4:
        var v: SessionDescription?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .description_p(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .description_p(v)}
      case 5:
        var v: Trickle?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .trickle(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .trickle(v)}
      case 6:
        if self.payload != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.payload = .iceConnectionState(v)}
      case 7:
        if self.payload != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.payload = .error(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    switch self.payload {
    case .join(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .create(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .description_p(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .trickle(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .iceConnectionState(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    case .error(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignalReply, rhs: SignalReply) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JoinRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "JoinRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "room"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.room)
      case 2: try decoder.decodeSingularMessageField(value: &self._description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.room.isEmpty {
      try visitor.visitSingularStringField(value: self.room, fieldNumber: 1)
    }
    if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JoinRequest, rhs: JoinRequest) -> Bool {
    if lhs.room != rhs.room {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JoinReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "JoinReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "room"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._description_p)
      case 2: try decoder.decodeSingularMessageField(value: &self._room)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._room {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JoinReply, rhs: JoinReply) -> Bool {
    if lhs._description_p != rhs._description_p {return false}
    if lhs._room != rhs._room {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CreateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CreateRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "visibility"),
    3: .same(proto: "group"),
    4: .same(proto: "users"),
    5: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularEnumField(value: &self.visibility)
      case 3: try decoder.decodeSingularInt64Field(value: &self.group)
      case 4: try decoder.decodeRepeatedInt64Field(value: &self.users)
      case 5: try decoder.decodeSingularMessageField(value: &self._description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.visibility != .public {
      try visitor.visitSingularEnumField(value: self.visibility, fieldNumber: 2)
    }
    if self.group != 0 {
      try visitor.visitSingularInt64Field(value: self.group, fieldNumber: 3)
    }
    if !self.users.isEmpty {
      try visitor.visitPackedInt64Field(value: self.users, fieldNumber: 4)
    }
    if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CreateRequest, rhs: CreateRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.visibility != rhs.visibility {return false}
    if lhs.group != rhs.group {return false}
    if lhs.users != rhs.users {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CreateReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CreateReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CreateReply, rhs: CreateReply) -> Bool {
    if lhs._description_p != rhs._description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SessionDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SessionDescription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "sdp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.type)
      case 2: try decoder.decodeSingularStringField(value: &self.sdp)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.sdp.isEmpty {
      try visitor.visitSingularStringField(value: self.sdp, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SessionDescription, rhs: SessionDescription) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.sdp != rhs.sdp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ICECandidate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ICECandidate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "candidate"),
    2: .same(proto: "sdpMid"),
    3: .same(proto: "sdpMLineIndex"),
    4: .same(proto: "usernameFragment"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.candidate)
      case 2: try decoder.decodeSingularStringField(value: &self.sdpMid)
      case 3: try decoder.decodeSingularInt64Field(value: &self.sdpMlineIndex)
      case 4: try decoder.decodeSingularStringField(value: &self.usernameFragment)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.candidate.isEmpty {
      try visitor.visitSingularStringField(value: self.candidate, fieldNumber: 1)
    }
    if !self.sdpMid.isEmpty {
      try visitor.visitSingularStringField(value: self.sdpMid, fieldNumber: 2)
    }
    if self.sdpMlineIndex != 0 {
      try visitor.visitSingularInt64Field(value: self.sdpMlineIndex, fieldNumber: 3)
    }
    if !self.usernameFragment.isEmpty {
      try visitor.visitSingularStringField(value: self.usernameFragment, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ICECandidate, rhs: ICECandidate) -> Bool {
    if lhs.candidate != rhs.candidate {return false}
    if lhs.sdpMid != rhs.sdpMid {return false}
    if lhs.sdpMlineIndex != rhs.sdpMlineIndex {return false}
    if lhs.usernameFragment != rhs.usernameFragment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Trickle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Trickle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    2: .same(proto: "iceCandidate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.target)
      case 2: try decoder.decodeSingularMessageField(value: &self._iceCandidate)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.target != .publisher {
      try visitor.visitSingularEnumField(value: self.target, fieldNumber: 1)
    }
    if let v = self._iceCandidate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Trickle, rhs: Trickle) -> Bool {
    if lhs.target != rhs.target {return false}
    if lhs._iceCandidate != rhs._iceCandidate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Trickle.Target: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PUBLISHER"),
    1: .same(proto: "SUBSCRIBER"),
  ]
}
