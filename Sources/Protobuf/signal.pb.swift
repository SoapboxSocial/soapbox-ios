// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: soapbox/v1/signal.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Soapbox_V1_SignalRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var payload: Soapbox_V1_SignalRequest.OneOf_Payload? = nil

  var join: Soapbox_V1_JoinRequest {
    get {
      if case .join(let v)? = payload {return v}
      return Soapbox_V1_JoinRequest()
    }
    set {payload = .join(newValue)}
  }

  var create: Soapbox_V1_CreateRequest {
    get {
      if case .create(let v)? = payload {return v}
      return Soapbox_V1_CreateRequest()
    }
    set {payload = .create(newValue)}
  }

  var description_p: Soapbox_V1_SessionDescription {
    get {
      if case .description_p(let v)? = payload {return v}
      return Soapbox_V1_SessionDescription()
    }
    set {payload = .description_p(newValue)}
  }

  var trickle: Soapbox_V1_Trickle {
    get {
      if case .trickle(let v)? = payload {return v}
      return Soapbox_V1_Trickle()
    }
    set {payload = .trickle(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable {
    case join(Soapbox_V1_JoinRequest)
    case create(Soapbox_V1_CreateRequest)
    case description_p(Soapbox_V1_SessionDescription)
    case trickle(Soapbox_V1_Trickle)

  #if !swift(>=4.1)
    static func ==(lhs: Soapbox_V1_SignalRequest.OneOf_Payload, rhs: Soapbox_V1_SignalRequest.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.join, .join): return {
        guard case .join(let l) = lhs, case .join(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.create, .create): return {
        guard case .create(let l) = lhs, case .create(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.description_p, .description_p): return {
        guard case .description_p(let l) = lhs, case .description_p(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.trickle, .trickle): return {
        guard case .trickle(let l) = lhs, case .trickle(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Soapbox_V1_SignalReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var payload: Soapbox_V1_SignalReply.OneOf_Payload? = nil

  var join: Soapbox_V1_JoinReply {
    get {
      if case .join(let v)? = payload {return v}
      return Soapbox_V1_JoinReply()
    }
    set {payload = .join(newValue)}
  }

  var create: Soapbox_V1_CreateReply {
    get {
      if case .create(let v)? = payload {return v}
      return Soapbox_V1_CreateReply()
    }
    set {payload = .create(newValue)}
  }

  var description_p: Soapbox_V1_SessionDescription {
    get {
      if case .description_p(let v)? = payload {return v}
      return Soapbox_V1_SessionDescription()
    }
    set {payload = .description_p(newValue)}
  }

  var trickle: Soapbox_V1_Trickle {
    get {
      if case .trickle(let v)? = payload {return v}
      return Soapbox_V1_Trickle()
    }
    set {payload = .trickle(newValue)}
  }

  var error: Soapbox_V1_SignalReply.Error {
    get {
      if case .error(let v)? = payload {return v}
      return .closed
    }
    set {payload = .error(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable {
    case join(Soapbox_V1_JoinReply)
    case create(Soapbox_V1_CreateReply)
    case description_p(Soapbox_V1_SessionDescription)
    case trickle(Soapbox_V1_Trickle)
    case error(Soapbox_V1_SignalReply.Error)

  #if !swift(>=4.1)
    static func ==(lhs: Soapbox_V1_SignalReply.OneOf_Payload, rhs: Soapbox_V1_SignalReply.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.join, .join): return {
        guard case .join(let l) = lhs, case .join(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.create, .create): return {
        guard case .create(let l) = lhs, case .create(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.description_p, .description_p): return {
        guard case .description_p(let l) = lhs, case .description_p(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.trickle, .trickle): return {
        guard case .trickle(let l) = lhs, case .trickle(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  enum Error: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case closed // = 0
    case full // = 1
    case notInvited // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .closed
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .closed
      case 1: self = .full
      case 2: self = .notInvited
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .closed: return 0
      case .full: return 1
      case .notInvited: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Soapbox_V1_SignalReply.Error: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Soapbox_V1_SignalReply.Error] = [
    .closed,
    .full,
    .notInvited,
  ]
}

#endif  // swift(>=4.2)

struct Soapbox_V1_JoinRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var room: String = String()

  var description_p: Soapbox_V1_SessionDescription {
    get {return _description_p ?? Soapbox_V1_SessionDescription()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _description_p: Soapbox_V1_SessionDescription? = nil
}

struct Soapbox_V1_JoinReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var description_p: Soapbox_V1_SessionDescription {
    get {return _description_p ?? Soapbox_V1_SessionDescription()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var room: Soapbox_V1_RoomState {
    get {return _room ?? Soapbox_V1_RoomState()}
    set {_room = newValue}
  }
  /// Returns true if `room` has been explicitly set.
  var hasRoom: Bool {return self._room != nil}
  /// Clears the value of `room`. Subsequent reads from it will return its default value.
  mutating func clearRoom() {self._room = nil}

  var role: Soapbox_V1_RoomState.RoomMember.Role = .regular

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _description_p: Soapbox_V1_SessionDescription? = nil
  fileprivate var _room: Soapbox_V1_RoomState? = nil
}

struct Soapbox_V1_CreateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var visibility: Soapbox_V1_Visibility = .public

  var users: [Int64] = []

  var description_p: Soapbox_V1_SessionDescription {
    get {return _description_p ?? Soapbox_V1_SessionDescription()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _description_p: Soapbox_V1_SessionDescription? = nil
}

struct Soapbox_V1_CreateReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var description_p: Soapbox_V1_SessionDescription {
    get {return _description_p ?? Soapbox_V1_SessionDescription()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _description_p: Soapbox_V1_SessionDescription? = nil
}

struct Soapbox_V1_SessionDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// "answer" | "offer" | "pranswer" | "rollback"
  var type: String = String()

  var sdp: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Soapbox_V1_ICECandidate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var candidate: String = String()

  var sdpMid: String = String()

  var sdpMLineIndex: Int64 = 0

  var usernameFragment: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Soapbox_V1_Trickle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var target: Soapbox_V1_Trickle.Target = .publisher

  var iceCandidate: Soapbox_V1_ICECandidate {
    get {return _iceCandidate ?? Soapbox_V1_ICECandidate()}
    set {_iceCandidate = newValue}
  }
  /// Returns true if `iceCandidate` has been explicitly set.
  var hasIceCandidate: Bool {return self._iceCandidate != nil}
  /// Clears the value of `iceCandidate`. Subsequent reads from it will return its default value.
  mutating func clearIceCandidate() {self._iceCandidate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Target: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case publisher // = 0
    case subscriber // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .publisher
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .publisher
      case 1: self = .subscriber
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .publisher: return 0
      case .subscriber: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _iceCandidate: Soapbox_V1_ICECandidate? = nil
}

#if swift(>=4.2)

extension Soapbox_V1_Trickle.Target: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Soapbox_V1_Trickle.Target] = [
    .publisher,
    .subscriber,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "soapbox.v1"

extension Soapbox_V1_SignalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignalRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "join"),
    3: .same(proto: "create"),
    4: .same(proto: "description"),
    5: .same(proto: "trickle"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try {
        var v: Soapbox_V1_JoinRequest?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .join(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .join(v)}
      }()
      case 3: try {
        var v: Soapbox_V1_CreateRequest?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .create(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .create(v)}
      }()
      case 4: try {
        var v: Soapbox_V1_SessionDescription?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .description_p(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .description_p(v)}
      }()
      case 5: try {
        var v: Soapbox_V1_Trickle?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .trickle(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .trickle(v)}
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.payload {
    case .join?: try {
      guard case .join(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .create?: try {
      guard case .create(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .description_p?: try {
      guard case .description_p(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .trickle?: try {
      guard case .trickle(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_SignalRequest, rhs: Soapbox_V1_SignalRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_SignalReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignalReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "join"),
    3: .same(proto: "create"),
    4: .same(proto: "description"),
    5: .same(proto: "trickle"),
    6: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try {
        var v: Soapbox_V1_JoinReply?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .join(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .join(v)}
      }()
      case 3: try {
        var v: Soapbox_V1_CreateReply?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .create(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .create(v)}
      }()
      case 4: try {
        var v: Soapbox_V1_SessionDescription?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .description_p(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .description_p(v)}
      }()
      case 5: try {
        var v: Soapbox_V1_Trickle?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .trickle(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .trickle(v)}
      }()
      case 6: try {
        if self.payload != nil {try decoder.handleConflictingOneOf()}
        var v: Soapbox_V1_SignalReply.Error?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.payload = .error(v)}
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.payload {
    case .join?: try {
      guard case .join(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .create?: try {
      guard case .create(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .description_p?: try {
      guard case .description_p(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .trickle?: try {
      guard case .trickle(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .error?: try {
      guard case .error(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_SignalReply, rhs: Soapbox_V1_SignalReply) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_SignalReply.Error: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ERROR_CLOSED"),
    1: .same(proto: "ERROR_FULL"),
    2: .same(proto: "ERROR_NOT_INVITED"),
  ]
}

extension Soapbox_V1_JoinRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JoinRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "room"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.room) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.room.isEmpty {
      try visitor.visitSingularStringField(value: self.room, fieldNumber: 1)
    }
    if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_JoinRequest, rhs: Soapbox_V1_JoinRequest) -> Bool {
    if lhs.room != rhs.room {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_JoinReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JoinReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "room"),
    3: .same(proto: "role"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._room) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.role) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._room {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.role != .regular {
      try visitor.visitSingularEnumField(value: self.role, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_JoinReply, rhs: Soapbox_V1_JoinReply) -> Bool {
    if lhs._description_p != rhs._description_p {return false}
    if lhs._room != rhs._room {return false}
    if lhs.role != rhs.role {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_CreateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "visibility"),
    4: .same(proto: "users"),
    5: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.visibility) }()
      case 4: try { try decoder.decodeRepeatedInt64Field(value: &self.users) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.visibility != .public {
      try visitor.visitSingularEnumField(value: self.visibility, fieldNumber: 2)
    }
    if !self.users.isEmpty {
      try visitor.visitPackedInt64Field(value: self.users, fieldNumber: 4)
    }
    if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_CreateRequest, rhs: Soapbox_V1_CreateRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.visibility != rhs.visibility {return false}
    if lhs.users != rhs.users {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_CreateReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_CreateReply, rhs: Soapbox_V1_CreateReply) -> Bool {
    if lhs._description_p != rhs._description_p {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_SessionDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SessionDescription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "sdp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sdp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.sdp.isEmpty {
      try visitor.visitSingularStringField(value: self.sdp, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_SessionDescription, rhs: Soapbox_V1_SessionDescription) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.sdp != rhs.sdp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_ICECandidate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ICECandidate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "candidate"),
    2: .standard(proto: "sdp_mid"),
    3: .standard(proto: "sdp_m_line_index"),
    4: .standard(proto: "username_fragment"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.candidate) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sdpMid) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.sdpMLineIndex) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.usernameFragment) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.candidate.isEmpty {
      try visitor.visitSingularStringField(value: self.candidate, fieldNumber: 1)
    }
    if !self.sdpMid.isEmpty {
      try visitor.visitSingularStringField(value: self.sdpMid, fieldNumber: 2)
    }
    if self.sdpMLineIndex != 0 {
      try visitor.visitSingularInt64Field(value: self.sdpMLineIndex, fieldNumber: 3)
    }
    if !self.usernameFragment.isEmpty {
      try visitor.visitSingularStringField(value: self.usernameFragment, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_ICECandidate, rhs: Soapbox_V1_ICECandidate) -> Bool {
    if lhs.candidate != rhs.candidate {return false}
    if lhs.sdpMid != rhs.sdpMid {return false}
    if lhs.sdpMLineIndex != rhs.sdpMLineIndex {return false}
    if lhs.usernameFragment != rhs.usernameFragment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Trickle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Trickle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    2: .standard(proto: "ice_candidate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.target) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._iceCandidate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.target != .publisher {
      try visitor.visitSingularEnumField(value: self.target, fieldNumber: 1)
    }
    if let v = self._iceCandidate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Soapbox_V1_Trickle, rhs: Soapbox_V1_Trickle) -> Bool {
    if lhs.target != rhs.target {return false}
    if lhs._iceCandidate != rhs._iceCandidate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Soapbox_V1_Trickle.Target: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TARGET_PUBLISHER"),
    1: .same(proto: "TARGET_SUBSCRIBER"),
  ]
}
