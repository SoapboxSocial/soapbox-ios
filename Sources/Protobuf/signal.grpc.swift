//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: signal.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `SFUClient`, then call methods of this protocol to make API calls.
internal protocol SFUClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: SFUClientInterceptorFactoryProtocol? { get }

  func signal(
    callOptions: CallOptions?,
    handler: @escaping (SignalReply) -> Void
  ) -> BidirectionalStreamingCall<SignalRequest, SignalReply>
}

extension SFUClientProtocol {
  internal var serviceName: String {
    return "SFU"
  }

  /// Bidirectional streaming call to Signal
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func signal(
    callOptions: CallOptions? = nil,
    handler: @escaping (SignalReply) -> Void
  ) -> BidirectionalStreamingCall<SignalRequest, SignalReply> {
    return self.makeBidirectionalStreamingCall(
      path: "/SFU/Signal",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignalInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol SFUClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'signal'.
  func makeSignalInterceptors() -> [ClientInterceptor<SignalRequest, SignalReply>]
}

internal final class SFUClient: SFUClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: SFUClientInterceptorFactoryProtocol?

  /// Creates a client for the SFU service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: SFUClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

